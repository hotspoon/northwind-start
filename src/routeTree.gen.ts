/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainLayoutRouteRouteImport } from './routes/_mainLayout/route'
import { Route as AuthLayoutRouteRouteImport } from './routes/_authLayout/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MainLayoutDashboardRouteImport } from './routes/_mainLayout/dashboard'
import { Route as AuthLayoutSignUpRouteImport } from './routes/_authLayout/sign-up'
import { Route as AuthLayoutLoginRouteImport } from './routes/_authLayout/login'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './routes/customScript[.]js'

const rootServerRouteImport = createServerRootRoute()

const MainLayoutRouteRoute = MainLayoutRouteRouteImport.update({
  id: '/_mainLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRouteRoute = AuthLayoutRouteRouteImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainLayoutDashboardRoute = MainLayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => MainLayoutRouteRoute,
} as any)
const AuthLayoutSignUpRoute = AuthLayoutSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/sign-up': typeof AuthLayoutSignUpRoute
  '/dashboard': typeof MainLayoutDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/sign-up': typeof AuthLayoutSignUpRoute
  '/dashboard': typeof MainLayoutDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authLayout': typeof AuthLayoutRouteRouteWithChildren
  '/_mainLayout': typeof MainLayoutRouteRouteWithChildren
  '/_authLayout/login': typeof AuthLayoutLoginRoute
  '/_authLayout/sign-up': typeof AuthLayoutSignUpRoute
  '/_mainLayout/dashboard': typeof MainLayoutDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/sign-up' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/sign-up' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_authLayout'
    | '/_mainLayout'
    | '/_authLayout/login'
    | '/_authLayout/sign-up'
    | '/_mainLayout/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLayoutRouteRoute: typeof AuthLayoutRouteRouteWithChildren
  MainLayoutRouteRoute: typeof MainLayoutRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/customScript.js'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/customScript.js'
  id: '__root__' | '/customScript.js'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_mainLayout': {
      id: '/_mainLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_mainLayout/dashboard': {
      id: '/_mainLayout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainLayoutDashboardRouteImport
      parentRoute: typeof MainLayoutRouteRoute
    }
    '/_authLayout/sign-up': {
      id: '/_authLayout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthLayoutSignUpRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
    '/_authLayout/login': {
      id: '/_authLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthLayoutRouteRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutSignUpRoute: typeof AuthLayoutSignUpRoute
}

const AuthLayoutRouteRouteChildren: AuthLayoutRouteRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutSignUpRoute: AuthLayoutSignUpRoute,
}

const AuthLayoutRouteRouteWithChildren = AuthLayoutRouteRoute._addFileChildren(
  AuthLayoutRouteRouteChildren,
)

interface MainLayoutRouteRouteChildren {
  MainLayoutDashboardRoute: typeof MainLayoutDashboardRoute
}

const MainLayoutRouteRouteChildren: MainLayoutRouteRouteChildren = {
  MainLayoutDashboardRoute: MainLayoutDashboardRoute,
}

const MainLayoutRouteRouteWithChildren = MainLayoutRouteRoute._addFileChildren(
  MainLayoutRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLayoutRouteRoute: AuthLayoutRouteRouteWithChildren,
  MainLayoutRouteRoute: MainLayoutRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
